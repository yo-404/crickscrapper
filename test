// package main

// import (
// 	"fmt"
// 	"log"

// 	"github.com/gocolly/colly/v2"
// 	// "github.com/yo-404/crickscrapper/crawler"
// )

// // type Matches struct {
// // 	Type       string `json:"match"`
// // 	Tournament string `json:"tournament"`
// // 	Location   string `json:"location"`
// // 	Date       string `json:"date"`
// // 	Result     string `json:"result"`
// // 	Score      string `json:"score"`
// // 	Time       string `json:"time"`
// // 	Opponent   string `json:"opponent"`
// // }

// func main() {
// 	defer timer("main")()
// 	c := colly.NewCollector()

// 	// matches := []Matches{}
// 	// SelectSeries()
// 	// CrawlURL, Teamname := crawler.ScrapforTeam()

// 	// c.OnHTML("div[class=ds-flex]", func(h *colly.HTMLElement) {
// 	// 	team1 := (h.ChildText("div.ds-flex.ds-items-center.ds-min-w-0.ds-mr-1"))
// 	// 	team2 := strings.ReplaceAll(team1, Teamname, "")
// 	// 	result := h.ChildText("span.ds-text-tight-xs")
// 	// 	if result == "RESULT" {
// 	// 		result = "RESULT DECLARED"
// 	// 	}

// 	// 	// location
// 	// 	var result1 string
// 	// 	location := h.ChildText("div.ds-text-tight-s.ds-font-regular.ds-truncate.ds-text-typo-mid3")
// 	// 	parts := strings.Split(location, "â€¢")
// 	// 	if len(parts) > 1 {
// 	// 		result1 = strings.TrimSpace(parts[1])
// 	// 	}
// 	// 	for i := 0; i < len(result1); i++ {
// 	// 		if result1[i] == ',' {
// 	// 			location = result1[0:i]
// 	// 			break
// 	// 		}
// 	// 	}

// 	// 	i := Matches{
// 	// 		Date:       h.ChildText("div.ds-text-compact-xs.ds-font-bold.ds-w-24"),
// 	// 		Type:       h.ChildText("span.ds-text-tight-s.ds-font-medium.ds-text-typo"),
// 	// 		Tournament: h.ChildText("span.ds-text-tight-s.ds-font-regular.ds-text-typo.ds-underline.ds-decoration-ui-stroke"),
// 	// 		Location:   location,
// 	// 		Result:     h.ChildText("p.ds-text-tight-s.ds-font-regular.ds-line-clamp-2.ds-text-typo"),
// 	// 		Score:      h.ChildText("div.ds-text-compact-s.ds-text-typo.ds-text-right.ds-whitespace-nowrap"),
// 	// 		Time:       result,
// 	// 		Opponent:   team2,
// 	// 	}

// 	// 	matches = append(matches, i)

// 	// })

// 	c.OnHTML("div[class=divleft]", func(h *colly.HTMLElement) {
// 		score := h.ChildText("li")
// 		fmt.Println(score)
// 	})

// 	c.OnError(func(r *colly.Response, err error) {
// 		fmt.Println("Request URL:", r.Request.URL, "failed with response:", r, "\nError:", err)
// 	})

// 	err := c.Visit("https://www.espncricinfo.com/ci/content/match/fixtures_futures.html#second")
// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	// data, err := json.MarshalIndent(matches, " ", "")
// 	// if err != nil {
// 	// 	log.Fatal(err)
// 	// }

// 	// err = os.WriteFile("./matches.json", data, 0644)
// 	// if err != nil {
// 	// 	panic(err)
// 	// }

// 	// fmt.Println(string(data))

// }

// // func timer(name string) func() {
// // 	start := time.Now()
// // 	return func() {
// // 		fmt.Printf("%s Scrapping took %v", name, time.Since(start))
// // 	}
// // }

// // func SelectSeries() {
// // 	d := colly.NewCollector()
// // 	var tours []struct {
// // 		Name string
// // 		Link string
// // 	}
// // 	d.OnRequest(func(r *colly.Request) {
// // 		fmt.Println("Visiting", r.URL)
// // 	})

// // 	d.OnHTML("div.divleft.li", func(e *colly.HTMLElement) {
// // 		// var choice int

// // 		name := e.ChildText("e.Text")
// // 		link := e.ChildAttr("ul", "li")
// // 		fmt.Println(name)
// // 		fmt.Println(link)
// // 		d.Visit(e.Request.AbsoluteURL(link))
// // 		tour := struct {
// // 			Name string
// // 			Link string
// // 		}{
// // 			Name: name,
// // 			Link: link,
// // 		}
// // 		tours = append(tours, tour)

// // 		// fmt.Println("Enter the tournament whose fixtures you want to see!")
// // 		// fmt.Scan(&choice)
// // 		// fmt.Println(tour.Link[2])
// // 	})

// // 	d.OnError(func(r *colly.Response, err error) {
// // 		log.Println("Request URL:", r.Request.URL, "failed with response:", r, "\nError:", err)
// // 	})

// // 	err := d.Visit("https://www.espncricinfo.com/ci/content/match/fixtures_futures.html#second")
// // 	if err != nil {
// // 		log.Fatal(err)
// // 	}

// // 	for _, tour := range tours {
// // 		fmt.Printf("Tour: %s\nLink: https://www.espncricinfo.com%s\n\n", tour.Name, tour.Link)
// // 	}

// // 	data1, err := json.MarshalIndent(tours, " ", "")
// // 	if err != nil {
// // 		log.Fatal(err)
// // 	}
// // 	fmt.Println(string(data1))
// // }

// =========================================================

// package Fixture

// import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"

	"github.com/gocolly/colly/v2"
// )

// type Series struct {
// 	Name string `json:"series,omitempty"`
// 	URL  string `json:"url,omitempty"`
// }

// type SeriesInfo struct {
// 	Series string `json:"series"`
// 	URL    string `json:"url"`
// }

// func SearchBySeries() {
// 	CrawlUrl := "https://www.espncricinfo.com/ci/content/match/fixtures_futures.html"
// 	c := colly.NewCollector()
	// var tours []struct {
	// 	Name string
	// 	Link string
	// }
	// tours := []Series{}

	// c.OnHTML("div[class=fixfutures]", func(h *colly.HTMLElement) {
	// future := h.ChildText("#second , .divleft , #second li #second a")
	// fmt.Println(future)
	// future1 := h.ChildText("#second , .divleft  ")
	// fmt.Println(future1)
	// link1 := h.ChildText("#second , .divleft , #second li #second a li:nth-child(19)")
	// fmt.Println(link1)
	// name := h.ChildText("li:nth-child(18) a")
	// fmt.Println(name)
	// link := h.ChildAttr("li:nth-child(6) a", "href")
	// fmt.Println(link)
	// })

	c.OnHTML(".divright > ul", func(h *colly.HTMLElement) {
		// future := h.ChildText("li:nth-child(1)")

		var index int = 0
		for i := 0; i < 7; i++ {
			stat := "li:nth-child(" + strconv.Itoa(index) + ")"
			stat1 := "li:nth-child(" + strconv.Itoa(index) + ") a"
			future1 := h.ChildText(stat)
			// fmt.Println(future1)
			future := h.ChildAttr(stat1, "href")
			// fmt.Println(future)

			// tour := struct {
			// 	Name string
			// 	Link string
			// }{
			tour := Series{
				Name: future1,
				URL:  future,
			}
			tours = append(tours, tour)

			index++
		}

		data1, err := json.MarshalIndent(tours, " ", "")
		if err != nil {
			log.Fatal(err)
		}

		err = os.WriteFile("./series.json", data1, 0644)
		if err != nil {
			panic(err)
		}

		// fmt.Println(string(data1))

		var seriesData []SeriesInfo
		err = json.Unmarshal([]byte(data1), &seriesData)
		if err != nil {
			fmt.Println("Error parsing JSON:", err)
			return
		}

		var filteredData []SeriesInfo
		for _, series := range seriesData {
			if series.Series != "" || series.URL != "" {
				filteredData = append(filteredData, series)
			}
		}

		filteredJSON, err := json.MarshalIndent(filteredData, " ", "")
		if err != nil {
			fmt.Println("Error serializing JSON:", err)
			return
		}

		// fmt.Println(string(filteredJSON))

		err = os.WriteFile("./series.json", filteredJSON, 0644)
		if err != nil {
			panic(err)
		}

		fmt.Println(filteredData[2].Series)
		fmt.Println(filteredData[2].URL)

		// fmt.Println(seriesData)

		for i, info := range filteredData {
			fmt.Printf("%v Series: %s \n", i+1, info.Series)
		}

		// future1 := h.ChildAttr("li>a", "href")
		// fmt.Println(future1)
		// tourna := h.Text
		// fmt.Println(tourna)
		// link := h.ChildAttr(".tab-text-web a ", "#first li")
		// fmt.Println(link)
	})
	// var links []Series
	// c.OnHTML(".divright > ul", func(h *colly.HTMLElement) {
	// 	h.ForEach("li", func(i int, h *colly.HTMLElement) {
	// 		e := Series{
	// 			Name: h.ChildText("li:nth-child(1)"),
	// 			URL:  h.ChildAttr("li:nth-child(1) a", "href"),
	// 		}
	// 		links = append(links, e)
	// 	})

	// fmt.Println(links)
	// future1 := h.ChildText("li:nth-child(3)")
	// fmt.Println(future1)
	// future := h.ChildAttr("li:nth-child(2) a", "href")
	// fmt.Println(future)
	// future1 := h.ChildAttr("li>a", "href")
	// fmt.Println(future1)
	// tourna := h.Text
	// fmt.Println(tourna)
	// link := h.ChildAttr(".tab-text-web a ", "#first li")
	// fmt.Println(link)
	// })

	// c.OnHTML("#second , .divright , h2:contains('International Tours')", func(h *colly.HTMLElement) {

	// future := h.ChildText("li:nth-child(21)")
	// fmt.Println(future)
	// tourna := h.Text
	// fmt.Println(tourna)
	// link := h.ChildAttr("a", "href")
	// fmt.Println(link)
	// link := h.Attr("href")
	// fmt.Println(link)
	// future1 := h.ChildAttr("li:nth-child(1) a", "href")
	// fmt.Println(future1)
	// future := h.ChildText(h.Text)
	// fmt.Println(future)
	// link := h.ChildAttr(".tab-text-web a ", "#first li")
	// fmt.Println(link)
	// })

	// c.OnError(func(r *colly.Response, err error) {
	// 	fmt.Println("Request URL:", r.Request.URL, "failed with response:", r, "\nError:", err)
	// })

	// err := c.Visit(CrawlUrl)
	// if err != nil {
	// 	log.Fatal(err)
	// }

	// data, err := json.MarshalIndent(links, " ", "")
	// if err != nil {
	// 	log.Fatal(err)
	// }

	// fmt.Println(string(data))

}
